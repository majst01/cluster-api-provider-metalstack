kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
metadata:
  name: "${CLUSTER_NAME}-controlplane"
  namespace: default
spec:
  nodeDrainTimeout: "0s"
  replicas: 1
  version: ${KUBERNETES_VERSION}
  infrastructureTemplate:
    kind: MetalStackMachineTemplate
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    name: "${CLUSTER_NAME}-controlplane"
  kubeadmConfigSpec:
    preKubeadmCommands:
    - echo "waiting for the network"
    - sleep 150
    - echo "preKubeadmCommands run"
    - sudo apt-get update && sudo apt-get install -y apt-transport-https curl
    - curl -sS https://packages.cloud.google.com/apt/doc/apt-key.gpg -o key
    - echo $(wc key)
    - sudo apt-key add key
    - sudo rm key
    - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    - sudo apt-get update
    - sudo apt-get install -y kubelet=${KUBERNETES_VERSION}-00 kubeadm=${KUBERNETES_VERSION}-00 kubectl=${KUBERNETES_VERSION}-00
    - sudo apt-mark hold kubelet kubeadm kubectl
    - kubeadm config migrate --old-config /tmp/kubeadm.yaml --new-config /tmp/new_kubeadm.yaml
    - sudo rm /tmp/kubeadm.yaml && sudo mv /tmp/new_kubeadm.yaml /tmp/kubeadm.yaml
    - echo "preKubeadmCommands finished"
    postKubeadmCommands:
    - sudo kubeadm init --config=/tmp/kubeadm.yaml --ignore-preflight-errors=NumCPU,Mem
    - sudo KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
    initConfiguration:
      localAPIEndpoint:
        advertiseAddress: "${CONTROL_PLANE_IP}"
        bindPort: 6443
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
    clusterConfiguration:
      controllerManager:
        extraArgs:
          enable-hostpath-provisioner: "true"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: MetalStackMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-controlplane"
  namespace: default
spec:
  template:
    spec:
      image: ubuntu-cloud-init-20.04
      machineType: v1-small-x86
      providerID: metalstack://2294c949-88f6-5390-8154-fa53d93a3314
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: Cluster
metadata:
  name: "${CLUSTER_NAME}"
spec:
  clusterNetwork:
    pods:
      cidrBlocks: ["${POD_CIDR}"]
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: MetalStackCluster
    name: "${CLUSTER_NAME}"
  controlPlaneRef:
    kind: KubeadmControlPlane
    apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
    name: "${CLUSTER_NAME}-controlplane"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: MetalStackCluster
metadata:
  name: "${CLUSTER_NAME}"
spec:
  controlPlaneEndpoint:
    host: "${CONTROL_PLANE_IP}"
    port: 6443
  firewallSpec:
    image: firewall-ubuntu-2.0
    machineType: v1-small-x86
    providerID: metalstack://2294c949-88f6-5390-8154-fa53d93a3313
  partition: vagrant
  projectID: 00000000-0000-0000-0000-000000000000
  publicNetworkID: internet-vagrant-lab
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineDeployment
metadata:
  name: ${CLUSTER_NAME}-worker-a
  labels:
    cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
    pool: worker-a
spec:
  replicas: ${WORKER_MACHINE_COUNT}
  clusterName: ${CLUSTER_NAME}
  selector:
    matchLabels:
      cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
      pool: worker-a
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
        pool: worker-a
    spec:
      version: ${KUBERNETES_VERSION}
      clusterName: ${CLUSTER_NAME}
      bootstrap:
        configRef:
          name: ${CLUSTER_NAME}-worker-a
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: ${CLUSTER_NAME}-worker-a
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: MetalStackMachineTemplate
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: MetalStackMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-worker-a
spec:
  template:
    spec:
      image: "${NODE_IMAGE}"
      machineType: "${WORKER_NODE_TYPE}"
      partition: "${PARTITION}"
      sshKeys:
        - "${SSH_KEY}"
---
kind: KubeadmConfigTemplate
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
metadata:
  name: "${CLUSTER_NAME}-worker-a"
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            cloud-provider: external
      preKubeadmCommands:
      - echo "waiting for the network"
      - sleep 150
      - echo "preKubeadmCommands run"
      - sudo apt-get update && sudo apt-get install -y apt-transport-https curl
      - curl -sS https://packages.cloud.google.com/apt/doc/apt-key.gpg -o key
      - echo $(wc key)
      - sudo apt-key add key
      - sudo rm key
      - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
      - sudo apt-get update
      - sudo apt-get install -y cri-tools=1.13.0-01 kubelet=${KUBERNETES_VERSION}-00 kubectl=${KUBERNETES_VERSION}-00
      - sudo apt-mark hold kubelet kubectl
      - echo "preKubeadmCommands finished"